#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_APELLIDOS 110
#define MAX_DOCNUM 16
typedef struct passenger {
    char doc_type[4]; // CC, TI, PA
    char doc_number[MAX_DOCNUM];
    char last_name[MAX_APELLIDOS];
    int genero;
    struct passenger* next;
} Passenger;

typedef struct {
    Passenger *head;
    int size;
} List;

// Inicializar lista
void init_list(List *l) {
    l->head = NULL;
    l->size = 0;
}

// Validar tipo de documento
int valid_doc_type(const char *s) {
    return strcmp(s, "CC") == 0 || strcmp(s, "TI") == 0 || strcmp(s, "PA") == 0 || strcmp(s, "genero")
}

// Validar apellido
int valid_last_name(const char *s) {
    if (strlen(s) < 1 || strlen(s) >= MAX_APELLIDOS)
        return 0;
    for (int i = 0; s[i]; i++) {
        if (!isalpha(s[i]))
        int genero = genero;
            return 0;
    }
    return 1;
}

// Leer línea (elimina salto de línea)
void read_line(char *buffer, int size) {
    fgets(buffer, size, stdin);
    buffer[strcspn(buffer, "\n")] = '\0';
}

// Agregar pasajero al final
int agregar_pasajero(List *l, const char *doc_type, const char *doc_number, const char *last_name) {
    Passenger *nuevo = malloc(sizeof(Passenger));
    if (!nuevo) return 0;

    strcpy(nuevo->doc_type, doc_type);
    strcpy(nuevo->doc_number, doc_number);
    strcpy(nuevo->last_name, last_name);
    strcpy (nuevo-> guenero = genero);
    nuevo->next = NULL;

    if (!l->head) {
        l->head = nuevo;
    } else {
        Passenger *cur = l->head;
        while (cur->next) cur = cur->next;
        cur->next = nuevo;
    }

    l->size++;
    return 1;
}

// Mostrar lista
void mostrar_lista(List *l) {
    if (!l->head) {
        printf("No hay pasajeros registrados.\n");
        return;
    }

    Passenger *cur = l->head;
    int i = 1;
    while (cur) {
        printf("%2d) %s | %s | %s\n", i++, cur->doc_type, cur->doc_number, cur->last_name curn->genero);
        cur = cur->next;
    }
}

// Eliminar primer pasajero (para abordar)
Passenger *eliminar_primero(List *l) {
    if (!l->head) return NULL;
    Passenger *temp = l->head;
    l->head = temp->next;
    l->size--;
    return temp;
}

// Liberar memoria
void liberar_lista(List *l) {
    Passenger *cur = l->head;
    while (cur) {
        Passenger *temp = cur;
        cur = cur->next;
        free(temp);
    }
    l->head = NULL;
    l->size = 0;
}

// MAIN
int main() {
    List lista;
    init_list(&lista);

    int capacidad;
    printf("Sistema de Gestión de Pasajeros\n");
    printf("Ingrese la capacidad máxima del avión: ");
    scanf("%d", &capacidad);
    while (getchar() != '\n');

    int extra = (capacidad * 10) / 100;
    int max_tiquetes = capacidad + extra;
    int vendidos = 0, abordados = 0;

    printf("Capacidad real: %d\n", capacidad);
    printf("Overbooking permitido: %d\n", extra);
    printf("Total máximo de pasajeros: %d\n", max_tiquetes);

    int opcion;

    while (1) {
        printf("\n----- MENÚ -----\n");
        printf("1) Registrar pasajero\n");
        printf("2) Mostrar pasajeros\n");
        printf("3) Abordar siguiente pasajero\n");
        printf("4) Abordar todos hasta llenar\n");
        printf("5) Mostrar estado del vuelo\n");
        printf("6) Salir\n");
        printf("Opción: ");
        scanf("%d", &opcion);
        while (getchar() != '\n');

        if (opcion == 1) {
            if (vendidos >= max_tiquetes) {
                printf("Límite alcanzado. No se pueden registrar más pasajeros.\n");
                continue;
            }

            char tipo[4], numero[MAX_DOCNUM], apellido[MAX_APELLIDOS];

            // Tipo de documento
            do {
                printf("Tipo de documento (CC, TI, PA): ");
                read_line(tipo, sizeof(tipo));
            } while (!valid_doc_type(tipo));

            // Número de documento
            printf("Número de documento: ");
            read_line(numero, sizeof(numero));

            // Apellido
            do {
                printf("Primer apellido: ");
                read_line(apellido, sizeof(apellido));
            } while (!valid_last_name(apellido));

            if (agregar_pasajero(&lista, tipo, numero, apellido)) {
                vendidos++;
                printf("Pasajero registrado exitosamente.\n");
            } else {
                printf("Error al registrar pasajero.\n");
            }

        } else if (opcion == 2) {
            mostrar_lista(&lista);

        } else if (opcion == 3) {
            if (abordados >= capacidad) {
                printf("El avión ya está lleno.\n");
                continue;
            }
            Passenger *p = eliminar_primero(&lista);
            if (!p) {
                printf("No hay pasajeros para abordar.\n");
            } else {
                abordados++;
                printf("Abordando: %s | %s | %s\n", p->doc_type, p->doc_number, p->last_name);
                free(p);
            }

        } else if (opcion == 4) {
            int count = 0;
            while (abordados < capacidad) {
                Passenger *p = eliminar_primero(&lista);
                if (!p) break;
                abordados++;
                count++;
                printf("Abordando: %s | %s | %s\n", p->doc_type, p->doc_number, p->last_name);
                free(p);
            }
            if (count == 0)
                printf("No hay pasajeros para abordar.\n");
            else
                printf("%d pasajeros abordaron.\n", count);

        } else if (opcion == 5) {
            printf("\nEstado del vuelo:\n");
            printf("Capacidad real: %d\n", capacidad);
            printf("Máximo con overbooking: %d\n", max_tiquetes);
            printf("Registrados: %d\n", vendidos);
            printf("Abordados: %d\n", abordados);
            printf("En espera: %d\n", lista.size);

        } else if (opcion == 6) {
            liberar_lista(&lista);
            printf("Memoria liberada. Saliendo del sistema.\n");
            break;

        } else {
            printf("Opción no válida.\n");
        }
    }

    return 0;
}