#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_APELLIDOS 110
#define MAX_DOCNUM 16

typedef struct passenger {
    char doc_type[4];
    char doc_number[MAX_DOCNUM];
    char last_name[MAX_APELLIDOS];
    int genero; // 1: Masculino, 2: Femenino, 3: No binario
    int nivel;  // 1: Económico, 2: Oro, 3: Platino
    struct passenger* next;
} Passenger;

typedef struct {
    Passenger *head;
    int size;
} List;

void init_list(List *l) {
    l->head = NULL;
    l->size = 0;
}

int valid_doc_type(const char *s) {
    return strcmp(s, "CC") == 0 || strcmp(s, "TI") == 0 || strcmp(s, "PA") == 0;
}

int valid_last_name(const char *s) {
    if (strlen(s) < 1 || strlen(s) >= MAX_APELLIDOS)
        return 0;
    for (int i = 0; s[i]; i++) {
        if (!isalpha(s[i]) && s[i] != ' ' && s[i] != '-')
            return 0;
    }
    return 1;
}

void read_line(char *buffer, int size) {
    fgets(buffer, size, stdin);
    buffer[strcspn(buffer, "\n")] = '\0';
}

const char* obtener_genero(int g) {
    if (g == 1) return "Masculino";
    else if (g == 2) return "Femenino";
    else return "No binario";
}

const char* obtener_nivel(int nivel) {
    switch (nivel) {
        case 1: return "Económico";
        case 2: return "Oro";
        case 3: return "Platino";
        default: return "Desconocido";
    }
}

void mostrar_lista(List *l) {
    if (!l->head) {
        printf("No hay pasajeros registrados.\n");
        return;
    }

    Passenger *cur = l->head;
    int i = 1;
    while (cur) {
        printf("%2d) %s | %s | %s | %s | %s\n", i++, cur->doc_type, cur->doc_number,
               cur->last_name, obtener_genero(cur->genero), obtener_nivel(cur->nivel));
        cur = cur->next;
    }
}

// Agregar pasajero (captura datos internamente)
int agregar_pasajero(List *l) {
    if (!l) return 0;

    Passenger *nuevo = malloc(sizeof(Passenger));
    if (!nuevo) return 0;

    // Capturar datos aquí
    do {
        printf("Tipo de documento (CC, TI, PA): ");
        read_line(nuevo->doc_type, sizeof(nuevo->doc_type));
    } while (!valid_doc_type(nuevo->doc_type));

    printf("Número de documento: ");
    read_line(nuevo->doc_number, sizeof(nuevo->doc_number));

    do {
        printf("Primer apellido: ");
        read_line(nuevo->last_name, sizeof(nuevo->last_name));
    } while (!valid_last_name(nuevo->last_name));

    do {
        printf("Género (1: Masculino, 2: Femenino, 3: No binario): ");
        scanf("%d", &nuevo->genero);
        while (getchar() != '\n');
    } while (nuevo->genero < 1 || nuevo->genero > 3);

    do {
        printf("Nivel (1: Económico, 2: Oro, 3: Platino): ");
        scanf("%d", &nuevo->nivel);
        while (getchar() != '\n');
    } while (nuevo->nivel < 1 || nuevo->nivel > 3);

    nuevo->next = NULL;

    if (!l->head) {
        l->head = nuevo;
    } else {
        Passenger *cur = l->head;
        while (cur->next) cur = cur->next;
        cur->next = nuevo;
    }

    l->size++;
    return 1;
}

// Eliminar por prioridad
Passenger *eliminar_por_prioridad(List *l) {
    if (!l->head) return NULL;

    Passenger *prev = NULL, *cur = l->head;
    Passenger *prev_target = NULL, *target = l->head;
    int max_nivel = cur->nivel;

    while (cur) {
        if (cur->nivel > max_nivel) {
            max_nivel = cur->nivel;
            prev_target = prev;
            target = cur;
        }
        prev = cur;
        cur = cur->next;
    }

    if (target == l->head) {
        l->head = target->next;
    } else if (prev_target) {
        prev_target->next = target->next;
    }

    l->size--;
    return target;
}

void liberar_lista(List *l) {
    Passenger *cur = l->head;
    while (cur) {
        Passenger *temp = cur;
        cur = cur->next;
        free(temp);
    }
    l->head = NULL;
    l->size = 0;
}

void informe_genero(List *l) {
    int masc = 0, fem = 0, nb = 0;

    Passenger *cur = l->head;
    while (cur) {
        if (cur->genero == 1) masc++;
        else if (cur->genero == 2) fem++;
        else if (cur->genero == 3) nb++;
        cur = cur->next;
    }

    printf("\n---- Informe de Género ----\n");
    printf("Masculino:   %d\n", masc);
    printf("Femenino:    %d\n", fem);
    printf("No binario:  %d\n", nb);
}

int main() {
    List lista;
    init_list(&lista);

    int capacidad;
    printf("Sistema de Gestión de Pasajeros\n");
    printf("Ingrese la capacidad máxima del avión: ");
    scanf("%d", &capacidad);
    while (getchar() != '\n');

    int extra = (capacidad * 10) / 100;
    int max_tiquetes = capacidad + extra;
    int vendidos = 0, abordados = 0;

    printf("Capacidad real: %d\n", capacidad);
    printf("Overbooking permitido: %d\n", extra);
    printf("Total máximo de pasajeros: %d\n", max_tiquetes);

    int opcion;

    while (1) {
        printf("\n----- MENÚ -----\n");
        printf("1) Registrar pasajero\n");
        printf("2) Mostrar pasajeros\n");
        printf("3) Abordar siguiente pasajero (por prioridad)\n");
        printf("4) Abordar todos hasta llenar (por prioridad)\n");
        printf("5) Mostrar estado del vuelo\n");
        printf("6) Salir\n");
        printf("7) Informe de género\n");
        printf("Opción: ");
        scanf("%d", &opcion);
        while (getchar() != '\n');

        if (opcion == 1) {
            if (vendidos >= max_tiquetes) {
                printf("Límite alcanzado. No se pueden registrar más pasajeros.\n");
                continue;
            }

            if (agregar_pasajero(&lista)) {
                vendidos++;
                printf("Pasajero registrado exitosamente.\n");
            } else {
                printf("Error al registrar pasajero.\n");
            }

        } else if (opcion == 2) {
            mostrar_lista(&lista);

        } else if (opcion == 3) {
            if (abordados >= capacidad) {
                printf("El avión ya está lleno.\n");
                continue;
            }
            Passenger *p = eliminar_por_prioridad(&lista);
            if (!p) {
                printf("No hay pasajeros para abordar.\n");
            } else {
                abordados++;
                printf("Abordando: %s | %s | %s | Nivel: %s\n",
                       p->doc_type, p->doc_number, p->last_name, obtener_nivel(p->nivel));
                free(p);
            }

        } else if (opcion == 4) {
            int count = 0;
            while (abordados < capacidad) {
                Passenger *p = eliminar_por_prioridad(&lista);
                if (!p) break;
                abordados++;
                count++;
                printf("Abordando: %s | %s | %s | Nivel: %s\n",
                       p->doc_type, p->doc_number, p->last_name, obtener_nivel(p->nivel));
                free(p);
            }
            if (count == 0)
                printf("No hay pasajeros para abordar.\n");
            else
                printf("%d pasajeros abordaron.\n", count);

        } else if (opcion == 5) {
            printf("\nEstado del vuelo:\n");
            printf("Capacidad real: %d\n", capacidad);
            printf("Máximo con overbooking: %d\n", max_tiquetes);
            printf("Registrados: %d\n", vendidos);
            printf("Abordados: %d\n", abordados);
            printf("En espera: %d\n", lista.size);

        } else if (opcion == 6) {
            liberar_lista(&lista);
            printf("Memoria liberada. Saliendo del sistema.\n");
            break;

        } else if (opcion == 7) {
            informe_genero(&lista);

        } else {
            printf("Opción no válida.\n");
        }
    }

    return 0;
}
